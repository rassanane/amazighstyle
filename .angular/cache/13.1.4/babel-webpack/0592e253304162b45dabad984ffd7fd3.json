{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ProduitsService = /*#__PURE__*/(() => {\n  class ProduitsService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.produitsRestUrl = environment.produitsRestUrl;\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      };\n      this.httpOptionsPdf = {\n        headers: new HttpHeaders({\n          //'Content-Type': 'application/file',\n          'enctype': 'multipart/form-data',\n          //'Accept': 'application/json',\n          //'responseType': 'arraybuffer',\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      };\n    }\n\n    httpErrorHandler(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"Erreur côté client : \" + error.message);\n      } else {\n        console.error(\"Erreur côté serveur. Le code de l'erreur : \" + error.status + \" et l'erreur retournée : \" + error.message);\n      }\n\n      return throwError(\"Erreur lors de l'appel du service\");\n    }\n\n    getProduitParFamille(id) {\n      return this.httpClient.get(this.produitsRestUrl + \"/famille/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    getProduitParType(id) {\n      return this.httpClient.get(this.produitsRestUrl + \"/type/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n  }\n\n  ProduitsService.ɵfac = function ProduitsService_Factory(t) {\n    return new (t || ProduitsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ProduitsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProduitsService,\n    factory: ProduitsService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProduitsService;\n})();","map":null,"metadata":{},"sourceType":"module"}