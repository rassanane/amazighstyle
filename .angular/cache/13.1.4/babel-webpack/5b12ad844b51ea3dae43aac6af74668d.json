{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuteursService = /*#__PURE__*/(() => {\n  class AuteursService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; //private auteursRestUrl = 'http://localhost:8080/api/auteurs';\n      //private auteursRestUrl = 'http://localhost:9090/api/auteurs';\n      //Pour déployer dans mon serveur\n      //private auteursRestUrl = 'http://192.168.1.92:9192/api/auteurs';\n      //Pour déployer dans le cloud aws\n\n      this.auteursRestUrl = 'http://3.227.22:9192/api/auteurs';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      };\n    }\n\n    httpErrorHandler(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"Erreur côté client : \" + error.message);\n      } else {\n        console.error(\"Erreur côté serveur. Le code de l'erreur : \" + error.status + \" et l'erreur retournée : \" + error.message);\n      }\n\n      return throwError(\"Erreur lors de l'appel du service\");\n    }\n\n    getAuteurs() {\n      return this.httpClient.get(this.auteursRestUrl, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    getAuteur(id) {\n      return this.httpClient.get(this.auteursRestUrl + \"/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    ajoutAuteur(auteur) {\n      return this.httpClient.post(this.auteursRestUrl + \"/ajout\", auteur, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    majAuteur(auteur) {\n      return this.httpClient.put(this.auteursRestUrl + \"/modification\", auteur, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    supprimeAuteur(auteur) {\n      const id = typeof auteur == 'number' ? auteur : auteur.id;\n      const url = `${this.auteursRestUrl}/suppression/${id}`;\n      return this.httpClient.delete(url, this.httpOptions);\n    }\n\n  }\n\n  AuteursService.ɵfac = function AuteursService_Factory(t) {\n    return new (t || AuteursService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuteursService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuteursService,\n    factory: AuteursService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuteursService;\n})();","map":null,"metadata":{},"sourceType":"module"}