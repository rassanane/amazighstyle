{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuteursService = /*#__PURE__*/(() => {\n  class AuteursService {\n    constructor(httpClient) {\n      this.httpClient = httpClient; //private auteursRestUrl          = 'http://localhost:8080/api/auteurs';\n      //private awsS3BiographiesRestUrl   = 'http://localhost:9191/api/s3documents/biblio-biographies/';\n      //Pour déployer dans mon serveur\n      //private auteursRestUrl          = 'http://192.168.1.92:9192/api/auteurs';\n      //Pour déployer dans le cloud aws\n      //private auteursRestUrl          = 'http://54.211.191.64:9192/api/auteurs';\n      /////////////\n\n      this.auteursRestUrl = 'http://localhost:9191/api/auteurs'; //private auteursRestUrl              = 'http://BIBLIO-BACK-PUBLIC-LOAD-BALANCER-1599167438.us-east-1.elb.amazonaws.com/api/auteurs';\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      };\n      this.httpOptionsPdf = {\n        headers: new HttpHeaders({\n          //'Content-Type': 'application/file',\n          'enctype': 'multipart/form-data',\n          //'Accept': 'application/json',\n          //'responseType': 'arraybuffer',\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      };\n    }\n\n    httpErrorHandler(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"Erreur côté client : \" + error.message);\n      } else {\n        console.error(\"Erreur côté serveur. Le code de l'erreur : \" + error.status + \" et l'erreur retournée : \" + error.message);\n      }\n\n      return throwError(\"Erreur lors de l'appel du service\");\n    }\n\n    getAuteurs() {\n      return this.httpClient.get(this.auteursRestUrl, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    getAuteur(id) {\n      return this.httpClient.get(this.auteursRestUrl + \"/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    ajoutAuteur(auteur, file) {\n      const formData = new FormData();\n      formData.append(\"fichier\", file);\n      return this.httpClient.post(this.auteursRestUrl + \"/ajout?nom=\" + auteur.nom + \"&prenom=\" + auteur.prenom, formData, this.httpOptionsPdf).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    majAuteur(auteur, file, ancienfichier) {\n      const formData = new FormData();\n      formData.append(\"fichier\", file);\n      return this.httpClient.put(this.auteursRestUrl + \"/modification?id=\" + auteur.id + \"&nom=\" + auteur.nom + \"&prenom=\" + auteur.prenom + \"&ancienfichier=\" + ancienfichier, formData, this.httpOptionsPdf) //return this.httpClient.put<Auteur>(this.auteursRestUrl + \"/modification\" , auteur, this.httpOptions)\n      .pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    supprimeAuteur(auteur, nomFichier) {\n      const id = typeof auteur == 'number' ? auteur : auteur.id;\n      const url = `${this.auteursRestUrl}/suppression/${id}/${nomFichier}`;\n      return this.httpClient.delete(url, this.httpOptions);\n    }\n\n    getBiographie(nomFichier) {\n      this.httpClient.get(this.auteursRestUrl + \"/biblio-biographies/download/\" + nomFichier, {\n        responseType: 'arraybuffer',\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + btoa('rachid:rachid123')\n        })\n      }).subscribe(response => this.downLoadFile(response, \"application/pdf\"));\n    }\n\n    downLoadFile(data, type) {\n      let blob = new Blob([data], {\n        type: type\n      });\n      let url = window.URL.createObjectURL(blob);\n      let pwa = window.open(url);\n\n      if (!pwa || pwa.closed || typeof pwa.closed == 'undefined') {\n        alert('Désactiver le Pop-up blocker et réssayer SVP !');\n      }\n    }\n\n  }\n\n  AuteursService.ɵfac = function AuteursService_Factory(t) {\n    return new (t || AuteursService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  AuteursService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuteursService,\n    factory: AuteursService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuteursService;\n})();","map":null,"metadata":{},"sourceType":"module"}