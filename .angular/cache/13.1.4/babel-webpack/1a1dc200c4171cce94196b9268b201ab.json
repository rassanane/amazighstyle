{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let LivresService = /*#__PURE__*/(() => {\n  class LivresService {\n    constructor(httpClient) {\n      this.httpClient = httpClient;\n      this.livresRestUrl = 'http://localhost:8080/api/livres';\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json' //,\n          //'Access-Control-Allow-Origin':'*',\n          //'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept',\n          //'Authorization': 'Basic ' + btoa('rachid:rachid123')\n\n        })\n      };\n    }\n\n    httpErrorHandler(error) {\n      if (error.error instanceof ErrorEvent) {\n        console.error(\"Erreur coté client : \" + error.message);\n      } else {\n        console.error(\"Erreur coté serveur. Le statut est \" + error.status + \" et l'erreur est \" + error.message);\n      }\n\n      return throwError(\"Erreur, merci de réessayer\");\n    }\n\n    getLivres() {\n      return this.httpClient.get(this.livresRestUrl, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    getLivre(id) {\n      return this.httpClient.get(this.livresRestUrl + \"/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    ajoutLivre(livre) {\n      return this.httpClient.post(this.livresRestUrl + \"/ajout\", livre, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    majLivre(livre) {\n      return this.httpClient.put(this.livresRestUrl + \"/modification\", livre, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n    supprimeLivre(livre) {\n      const id = typeof livre == 'number' ? livre : livre.id;\n      const url = `${this.livresRestUrl}/suppression/${id}`;\n      return this.httpClient.delete(url, this.httpOptions);\n    }\n\n    selectTitreParId(id) {\n      return this.httpClient.get(this.livresRestUrl + \"/nomparidt/\" + id, this.httpOptions).pipe(retry(3), catchError(this.httpErrorHandler));\n    }\n\n  }\n\n  LivresService.ɵfac = function LivresService_Factory(t) {\n    return new (t || LivresService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  LivresService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LivresService,\n    factory: LivresService.ɵfac,\n    providedIn: 'root'\n  });\n  return LivresService;\n})();","map":null,"metadata":{},"sourceType":"module"}